import express from 'express';
import mongoose from 'mongoose';

import cors from 'cors'

// Importing models
import Users from './Users.js'
import Menu from './Menu.js'
import Orders from './Orders.js'

export const app = express();

app.use(cors());
app.use(express.json());

app.use(express.urlencoded({ extended: true }));

mongoose.connect('mongodb+srv://xoraizw1:JBTuGvVAnT1A8BDs@mern-exam.8h63kyy.mongodb.net/?retryWrites=true&w=majority&appName=mern-exam', 
{ useNewUrlParser: true, useUnifiedTopology: true })
.then(() => console.log('MongoDB connected'))
.catch(err => console.log('MongoDB connection error:', err));


// POST requests
app.post("/login", async (req, res) => {
  const { username, password, type } = req.body;
  try {
      const user = await Users.findOne({ username, type });
      
      // Check if the user exists and if the password matches
      if (!user || user.password !== password) 
      {
        return res.status(401).json({ message: "Invalid username or password" });
      }
      
      // Authentication successful
      return res.send({ message: "Login successful", name: user.name});
  } catch (error) {
      console.error("Login error:", error);
      return res.status(500).json({ message: "Internal server error" });
  }
});
app.post("/signup", async (req, res) => {
const { username, password, type, name } = req.body;
try {
    const existingUser = await Users.findOne({ username, type });

    if (existingUser) 
    {
        return res.status(400).json({ message: `Username already exists as ${type}` });
    }

    const newUser = new Users({ username, password, type, name });
    await newUser.save();

    return res.status(201).json({ message: "Signup successful" });
} catch (error) {
    console.error("Signup error:", error);
    return res.status(500).json({ message: "Internal server error" });
}
});


app.post("/order", async (req, res) => {
const { order, status, total, user } = req.body;
try {
    const newOrder = new Orders({ order, status, total, user });
    await newOrder.save();

    return res.status(201).json({ message: "Order placed" });
} catch (error) {
    console.error("Error placing order:", error);
    return res.status(500).json({ message: "Error placing order" });
}
});


//GET requests
app.get('/my-orders/:username', async (req, res) => 
{
    console.log('hi')
  const { username } = req.params;
  try 
  {
      const orders = await Orders.find({ user: username });
      res.status(200).json({ orders });
  } 
  catch (error) 
  {
      // Handle errors
      console.error('Failed to fetch auctions:', error);
      res.status(500).json({ message: 'Internal server error' });
  }
});
app.get('/all-orders/', async (req, res) => 
{
  try 
  {
      const orders = await Orders.find({ });
      res.status(200).json({ orders });
  } 
  catch (error) 
  {
      // Handle errors
      console.error('Failed to fetch auctions:', error);
      res.status(500).json({ message: 'Internal server error' });
  }
});

app.get('/menu', async (req, res) => {
  try {
      const menu = await Menu.find({});
      let sendArr = []
      for (let x = 0; x < menu.length; x++)
      {
        let obj = {
            name: menu[x].name,
            price: menu[x].price,
            description: menu[x].description,
            qty: 0
        }
        sendArr.push(obj)
    }
    console.log("New Array: ", sendArr)
    res.status(200).json({ menu, sendArr });
  } catch (error) {
      console.error('Error fetching auctions:', error);
      res.status(500).json({ message: 'Internal server error' });
  }
});